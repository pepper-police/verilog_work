// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire [1:0] keyout;
wire [9:0] swout;
wire myCLK = keyout[0];
wire rst = SW[9];

wire [31:0] pc, rdata1, rdata2, result, wdata, nextpc, newpc, vdata;
wire [5:0] sel_led;

//=======================================================
//  Structural coding
//=======================================================

BTN_IN BTN0 (
  .CLK(MAX10_CLK1_50),
  .RST(rst),
  .KEY(KEY),
  .SW(SW),
  .KEYOUT(keyout),
  .SWOUT(swout)
);

SingleCycleClockMIPS SCCM0 (
  .CLK(myCLK),
  .RST(rst),
  .W_Ins(GPIO[31:0]),
  .WE(SW[8]),
  .PC(pc),
  .Result(result),
  .Rdata1(rdata1),
  .Rdata2(rdata2),
  .Wdata(wdata),
  .nextPC(nextpc),
  .newPC(newpc)
);

SELECTOR SEL0 (
  .SEL(swout[2:0]),
  .Rdata1(rdata1),
  .Rdata2(rdata2), 
  .Result(result),
  .Wdata(wdata), 
  .NextPC(nextpc),
  .newPC(newpc),
  .SEL_LED(sel_led),
  .Vdata(vdata)
);

SEG7DEC Res00 (
  .DIN(vdata[3:0]),
  .EN(1'b1),
  .DOT(1'b1),
  .nHEX(HEX0)
);

SEG7DEC Res01 (
  .DIN(vdata[7:4]),
  .EN(1'b1),
  .DOT(1'b0),
  .nHEX(HEX1)
);
SEG7DEC Res02 (
  .DIN(vdata[11:8]),
  .EN(1'b1),
  .DOT(1'b0),
  .nHEX(HEX2)
);

SEG7DEC Res03 (
  .DIN(vdata[15:12]),
  .EN(1'b1),
  .DOT(1'b0),
  .nHEX(HEX3)
);
SEG7DEC PC00 (
  .DIN(pc[5:2]),
  .EN(1'b1),
  .DOT(1'b1),
  .nHEX(HEX4)
);

SEG7DEC PC01 (
  .DIN(pc[9:6]),
  .EN(1'b1),
  .DOT(1'b0),
  .nHEX(HEX5)
);

assign LEDR[9:0] = {4'b0, sel_led};

endmodule
